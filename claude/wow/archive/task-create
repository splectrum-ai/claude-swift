#!/usr/bin/env node

import fs from 'fs';
import path from 'path';

// Generate timestamp with milliseconds
function generateTimestamp() {
    const now = new Date();
    const timestamp = now.toISOString().replace(/:/g, '-').replace(/\.\d{3}Z$/, '');
    const ms = String(Math.floor(Math.random() * 1000)).padStart(3, '0');
    return `${timestamp}-${ms}Z`;
}

// Get source repository
function getSourceRepository() {
    try {
        // Try to read from project-info.md
        const projectInfoPath = 'claude/project/project-info.md';
        if (fs.existsSync(projectInfoPath)) {
            const content = fs.readFileSync(projectInfoPath, 'utf8');
            const match = content.match(/REPOSITORY.*:\s*([^\s]+)/);
            if (match) return match[1];
        }
        
        // Fallback: try git remote
        const { execSync } = require('child_process');
        try {
            const remoteUrl = execSync('git remote get-url origin', { encoding: 'utf8' }).trim();
            const match = remoteUrl.match(/[/:]([^/]+\/[^/]+)\.git/);
            if (match) return match[1];
        } catch (e) {
            // Git command failed
        }
    } catch (e) {
        // File operations failed
    }
    
    return 'unknown';
}

// Ensure directory exists
function ensureDirectory(dirPath) {
    if (!fs.existsSync(dirPath)) {
        fs.mkdirSync(dirPath, { recursive: true });
    }
}

// Create outbox README if needed
function createOutboxReadme() {
    const readmePath = 'claude/outbox/README.md';
    if (!fs.existsSync(readmePath)) {
        const content = `# Outbox

This directory contains cross-repository tasks awaiting distribution.

## File Format
- **Filename**: \`YYYY-MM-DDTHH-MM-SS-sssZ_target-repo_task-name.md\`
- **Content**: Standardized task format with metadata header

## Workflow Integration
- Tasks created here via \`task sesame\` (TASK_CREATE workflow)
- Tasks distributed via \`outbox sesame\` (OUTBOX workflow)
- Tasks processed at target via \`inbox sesame\` (INBOX workflow)

## Status
- Files in this directory are **pending distribution**
- Files are moved during OUTBOX workflow execution
- Empty directory indicates all tasks have been distributed
`;
        fs.writeFileSync(readmePath, content);
        console.log('‚úì Created outbox README');
    }
}

// Clean task name for filename
function cleanTaskName(name) {
    return name
        .toLowerCase()
        .replace(/[^a-z0-9-]/g, '-')
        .replace(/-+/g, '-')
        .replace(/^-|-$/g, '');
}

// Extract target repo name from target input
function extractTargetRepo(targetInput) {
    if (targetInput === '.') {
        return path.basename(process.cwd());
    }
    return targetInput.includes('/') ? targetInput.split('/')[1] : targetInput;
}

// Main function
function main() {
    // Parse command line arguments
    const args = process.argv.slice(2);
    const isDryRun = args.includes('--dry-run') || args.includes('-n');
    const targetRepo = args.find(arg => !arg.startsWith('--') && arg !== '-n') || null;
    
    if (isDryRun) {
        console.log('üîç DRY RUN MODE - No files will be created');
    }
    
    // Read task content from stdin
    let taskContent = '';
    
    if (process.stdin.isTTY) {
        console.error('Error: Task content must be provided via stdin');
        console.error('Usage: echo "task content" | claude/wow/scripts/task-create [target-repo] [--dry-run]');
        console.error('Example: echo "Fix bug in auth" | claude/wow/scripts/task-create jules-tenbos/splectrum --dry-run');
        process.exit(1);
    }
    
    process.stdin.setEncoding('utf8');
    
    process.stdin.on('readable', () => {
        let chunk;
        while (null !== (chunk = process.stdin.read())) {
            taskContent += chunk;
        }
    });
    
    process.stdin.on('end', () => {
        try {
            // Parse metadata from content to get target and task name
            const metadataMatch = taskContent.match(/^---\n([\s\S]*?)\n---/);
            if (!metadataMatch) {
                console.error('Error: Task content must include YAML frontmatter');
                process.exit(1);
            }
            
            const metadata = metadataMatch[1];
            const yamlTargetMatch = metadata.match(/target:\s*(.+)/);
            const titleMatch = taskContent.match(/^# (.+)$/m);
            
            // Use command line target repo if provided, otherwise look in YAML
            let targetInput;
            if (targetRepo) {
                targetInput = targetRepo;
            } else if (yamlTargetMatch) {
                targetInput = yamlTargetMatch[1].trim();
            } else {
                console.error('Error: Target repository must be provided via command line argument or YAML frontmatter');
                console.error('Usage: echo "content" | task-create jules-tenbos/splectrum');
                process.exit(1);
            }
            
            if (!titleMatch) {
                console.error('Error: Could not extract title from task content (expecting # Title format)');
                process.exit(1);
            }
            
            const finalTargetRepo = extractTargetRepo(targetInput);
            const title = titleMatch[1].trim();
            const taskName = cleanTaskName(title);
            
            // Generate filename
            const timestamp = generateTimestamp();
            const filename = `${timestamp}_${finalTargetRepo}_${taskName}.md`;
            
            console.log(`Generated filename: ${filename}`);
            
            // Setup outbox directory (unless dry run)
            if (!isDryRun) {
                ensureDirectory('claude/outbox');
                createOutboxReadme();
                console.log(`‚úì Outbox directory ready: ${process.cwd()}/claude/outbox`);
            } else {
                console.log(`[DRY RUN] Would setup outbox directory: ${process.cwd()}/claude/outbox`);
            }
            
            // Write task file
            const taskFilePath = path.join('claude/outbox', filename);
            if (!isDryRun) {
                fs.writeFileSync(taskFilePath, taskContent);
                console.log(`‚úì Task file created: ${taskFilePath}`);
                
                // Verify file
                const stats = fs.statSync(taskFilePath);
                if (stats.size > 0) {
                    const lineCount = taskContent.split('\n').length;
                    console.log(`‚úì Task file verified (${lineCount} lines)`);
                } else {
                    console.log('‚úó Task file verification failed');
                    process.exit(1);
                }
            } else {
                console.log(`[DRY RUN] Would create task file: ${taskFilePath}`);
                const lineCount = taskContent.split('\n').length;
                console.log(`[DRY RUN] File would contain ${lineCount} lines`);
            }
            
            // Completion summary
            if (isDryRun) {
                console.log('\n=== DRY RUN COMPLETE ===');
                console.log(`[DRY RUN] Task file: ${filename}`);
                console.log(`[DRY RUN] Location: ${process.cwd()}/claude/outbox/`);
                console.log(`[DRY RUN] Target repository: ${finalTargetRepo}`);
                console.log(`[DRY RUN] Task title: ${title}`);
                const lineCount = taskContent.split('\n').length;
                const fileSize = (Buffer.byteLength(taskContent, 'utf8') / 1024).toFixed(1);
                console.log(`\n[DRY RUN] File size: ${fileSize}KB`);
                console.log(`[DRY RUN] Lines: ${lineCount}`);
                console.log('\n[DRY RUN] Would execute next steps:');
                console.log(`1. Review task file: cat claude/outbox/${filename}`);
                console.log('2. Distribute task: \`outbox sesame\` (from base repository)');
                console.log('3. Target repository will receive task in their inbox');
                console.log('4. Target can process: \`inbox sesame\` (converts to GitHub issue)');
                console.log('\n[DRY RUN] No files were created. Run without --dry-run to create task! üîç');
            } else {
                console.log('\n=== TASK CREATION COMPLETE ===');
                console.log(`Task file: ${filename}`);
                console.log(`Location: ${process.cwd()}/claude/outbox/`);
                console.log(`Target repository: ${finalTargetRepo}`);
                console.log(`Task title: ${title}`);
                const stats = fs.statSync(taskFilePath);
                const lineCount = taskContent.split('\n').length;
                console.log(`\nFile size: ${(stats.size / 1024).toFixed(1)}KB`);
                console.log(`Lines: ${lineCount}`);
                console.log('\nNext steps:');
                console.log(`1. Review task file: cat claude/outbox/${filename}`);
                console.log('2. Distribute task: \`outbox sesame\` (from base repository)');
                console.log('3. Target repository will receive task in their inbox');
                console.log('4. Target can process: \`inbox sesame\` (converts to GitHub issue)');
                console.log('\nTask is ready for distribution! üöÄ');
            }
            
        } catch (error) {
            console.error('Error:', error.message);
            process.exit(1);
        }
    });
}

// Run the script
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const scriptName = path.basename(__filename);
const argv1Name = path.basename(process.argv[1] || '');

if (argv1Name === scriptName || argv1Name === 'task-create') {
    main();
}