#!/usr/bin/env node

const fs = require('fs');
const { execSync } = require('child_process');

// Get target milestone from version config
function getTargetMilestone() {
    try {
        if (fs.existsSync('claude/project/version-config.md')) {
            const content = fs.readFileSync('claude/project/version-config.md', 'utf8');
            const match = content.match(/TARGET_VERSION.*:\s*(v[0-9.]+)/);
            if (match) return match[1];
        }
    } catch (e) {
        // Fall back to no milestone
    }
    return null;
}

// Parse task file content
function parseTaskFile(filePath) {
    const content = fs.readFileSync(filePath, 'utf8');
    
    // Extract YAML frontmatter
    const frontmatterMatch = content.match(/^---\n([\s\S]*?)\n---/);
    let metadata = {};
    
    if (frontmatterMatch) {
        const yamlContent = frontmatterMatch[1];
        // Simple YAML parsing for basic key-value pairs
        yamlContent.split('\n').forEach(line => {
            const match = line.match(/^(\w+):\s*(.+)$/);
            if (match) {
                metadata[match[1]] = match[2].trim();
            }
        });
    }
    
    // Extract title (first # heading)
    const titleMatch = content.match(/^# (.+)$/m);
    const title = titleMatch ? titleMatch[1] : 'Untitled Task';
    
    // Extract body (everything after frontmatter)
    const bodyMatch = content.match(/^---\n[\s\S]*?\n---\n\n([\s\S]*)$/);
    const body = bodyMatch ? bodyMatch[1] : content;
    
    return { metadata, title, body };
}

// Create GitHub issue
function createGitHubIssue(title, body, milestone = null) {
    try {
        let cmd = `gh issue create --title "${title.replace(/"/g, '\\"')}"`;
        
        // Write body to temp file to handle multiline content
        const tempFile = `/tmp/issue-body-${Date.now()}.md`;
        fs.writeFileSync(tempFile, body);
        cmd += ` --body-file "${tempFile}"`;
        
        // Add milestone if specified
        if (milestone) {
            cmd += ` --milestone "${milestone}"`;
        }
        
        console.log('Creating GitHub issue...');
        const result = execSync(cmd, { encoding: 'utf8' });
        
        // Clean up temp file
        fs.unlinkSync(tempFile);
        
        // Extract issue URL from output
        const urlMatch = result.match(/https:\/\/github\.com\/[^\s]+/);
        const issueUrl = urlMatch ? urlMatch[0] : 'created successfully';
        
        return { success: true, url: issueUrl };
    } catch (error) {
        return { success: false, error: error.message };
    }
}

// Main function
function main() {
    const taskFile = process.argv[2];
    
    if (!taskFile) {
        console.error('Usage: create-issue <task-file>');
        console.error('Example: create-issue claude/inbox/task.md');
        process.exit(1);
    }
    
    if (!fs.existsSync(taskFile)) {
        console.error(`Error: Task file not found: ${taskFile}`);
        process.exit(1);
    }
    
    try {
        console.log(`Processing task file: ${taskFile}`);
        
        // Parse task file
        const { metadata, title, body } = parseTaskFile(taskFile);
        
        // Determine milestone
        let milestone = metadata.milestone || getTargetMilestone();
        if (milestone) {
            console.log(`Using milestone: ${milestone}`);
        } else {
            console.log('No milestone assigned');
        }
        
        // Create enhanced body with metadata
        let enhancedBody = body;
        
        // Add cross-repository metadata if present
        if (metadata.source) {
            enhancedBody = `## Cross-Repository Task

**Source**: ${metadata.source}  
**Type**: ${metadata.type || 'task'}  
**Created**: ${metadata.created || 'unknown'}  
**Priority**: ${metadata.priority || 'MEDIUM'}

---

${body}

---

*This issue was automatically created from a task file.*`;
        }
        
        // Create GitHub issue
        const result = createGitHubIssue(title, enhancedBody, milestone);
        
        if (result.success) {
            console.log(`✓ Issue created successfully: ${result.url}`);
            
            // Log basic info about what was created
            console.log(`  Title: ${title}`);
            console.log(`  Milestone: ${milestone || 'none'}`);
            if (metadata.source) {
                console.log(`  Source: ${metadata.source}`);
            }
            
            process.exit(0);
        } else {
            console.error(`✗ Failed to create issue: ${result.error}`);
            process.exit(1);
        }
        
    } catch (error) {
        console.error(`Error processing task file: ${error.message}`);
        process.exit(1);
    }
}

// Run the script
if (require.main === module) {
    main();
}