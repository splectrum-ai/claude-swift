#!/usr/bin/env node

/**
 * GitHub Issues CLI - Drop-in replacement for `gh issue` commands
 * 
 * Provides identical command-line interface to GitHub CLI but uses
 * native fetch() implementation for zero dependencies
 * 
 * Usage:
 *   gh-issue list [--state open|closed|all] [--milestone title] [--limit n]
 *   gh-issue view <issue-number>
 *   gh-issue create --title "Title" --body "Body" [--milestone "Milestone"]
 *   gh-issue edit <issue-number> [--title "New Title"] [--add-label "label"]
 *   gh-issue close <issue-number> [-c "Comment"]
 */

import { createGitHubAPI } from './lib-github-api.js';
import { promises as fs } from 'fs';

/**
 * Parse command line arguments into structured options
 */
function parseArgs(args) {
    const options = {
        command: args[0],
        subcommand: args[1],
        flags: {},
        positional: []
    };
    
    let i = 0;
    while (i < args.length) {
        const arg = args[i];
        
        if (arg.startsWith('--')) {
            const flagName = arg.substring(2);
            const nextArg = args[i + 1];
            
            if (nextArg && !nextArg.startsWith('-')) {
                options.flags[flagName] = nextArg;
                i += 2;
            } else {
                options.flags[flagName] = true;
                i += 1;
            }
        } else if (arg.startsWith('-')) {
            const flagName = arg.substring(1);
            const nextArg = args[i + 1];
            
            if (nextArg && !nextArg.startsWith('-')) {
                options.flags[flagName] = nextArg;
                i += 2;
            } else {
                options.flags[flagName] = true;
                i += 1;
            }
        } else {
            options.positional.push(arg);
            i += 1;
        }
    }
    
    return options;
}

/**
 * Format output to match gh CLI JSON format
 */
function formatOutput(data, options = {}) {
    if (options.flags && options.flags.json) {
        // Output raw JSON for --json flag
        const fields = options.flags.json === true ? null : options.flags.json.split(',');
        
        if (fields && Array.isArray(data)) {
            // Filter fields for array output
            const filteredData = data.map(item => {
                const filtered = {};
                fields.forEach(field => {
                    if (item.hasOwnProperty(field)) {
                        filtered[field] = item[field];
                    }
                });
                return filtered;
            });
            return JSON.stringify(filteredData, null, 2);
        } else if (fields && typeof data === 'object') {
            // Filter fields for object output
            const filtered = {};
            fields.forEach(field => {
                if (data.hasOwnProperty(field)) {
                    filtered[field] = data[field];
                }
            });
            return JSON.stringify(filtered, null, 2);
        }
    }
    
    // Default JSON output
    return JSON.stringify(data, null, 2);
}

/**
 * Main CLI function
 */
async function main() {
    try {
        const args = process.argv.slice(2);
        const options = parseArgs(args);
        
        // Initialize GitHub API client with current working directory
        const github = createGitHubAPI({ workingDirectory: process.cwd() });
        
        // Handle different commands
        switch (options.positional[0]) {
            case 'list':
                const listOptions = {
                    state: options.flags.state || 'open',
                    milestone: options.flags.milestone,
                    labels: options.flags.label,
                    per_page: options.flags.limit ? parseInt(options.flags.limit) : 30
                };
                
                const issues = await github.listIssues(listOptions);
                console.log(formatOutput(issues, options));
                break;
                
            case 'view':
                const issueNumber = parseInt(options.positional[1]);
                if (!issueNumber) {
                    throw new Error('Issue number is required for view command');
                }
                
                const issue = await github.getIssue(issueNumber);
                console.log(formatOutput(issue, options));
                break;
                
            case 'create':
                if (!options.flags.title) {
                    throw new Error('--title is required for create command');
                }
                
                let body = options.flags.body || '';
                
                // Handle --body-file flag
                if (options.flags['body-file']) {
                    const bodyFile = options.flags['body-file'];
                    if (bodyFile === '-') {
                        // Read from stdin
                        body = await readStdin();
                    } else {
                        // Read from file
                        body = await fs.readFile(bodyFile, 'utf8');
                    }
                }
                
                const createData = {
                    title: options.flags.title,
                    body: body,
                    labels: options.flags.label ? [options.flags.label] : [],
                    milestone: options.flags.milestone
                };
                
                const newIssue = await github.createIssue(createData);
                
                // Output URL for compatibility with gh CLI
                console.log(newIssue.url);
                break;
                
            case 'edit':
                const editNumber = parseInt(options.positional[1]);
                if (!editNumber) {
                    throw new Error('Issue number is required for edit command');
                }
                
                const updateData = {};
                if (options.flags.title) updateData.title = options.flags.title;
                if (options.flags.body) updateData.body = options.flags.body;
                if (options.flags.milestone) updateData.milestone = options.flags.milestone;
                
                let updatedIssue = await github.updateIssue(editNumber, updateData);
                
                // Handle --add-label flag
                if (options.flags['add-label']) {
                    const labels = Array.isArray(options.flags['add-label']) 
                        ? options.flags['add-label'] 
                        : [options.flags['add-label']];
                    updatedIssue = await github.addLabelsToIssue(editNumber, labels);
                }
                
                console.log(formatOutput(updatedIssue, options));
                break;
                
            case 'close':
                const closeNumber = parseInt(options.positional[1]);
                if (!closeNumber) {
                    throw new Error('Issue number is required for close command');
                }
                
                const comment = options.flags.c || options.flags.comment;
                const closedIssue = await github.closeIssue(closeNumber, comment);
                
                console.log(`Issue #${closedIssue.number} closed`);
                break;
                
            default:
                console.log('GitHub Issues CLI - Available commands:');
                console.log('  list [--state open|closed|all] [--milestone title] [--label name] [--limit n]');
                console.log('  view <issue-number>');
                console.log('  create --title "Title" [--body "Body"] [--body-file file] [--milestone "Milestone"] [--label "Label"]');
                console.log('  edit <issue-number> [--title "New Title"] [--add-label "Label"] [--milestone "Milestone"]');
                console.log('  close <issue-number> [-c "Comment"]');
                console.log('');
                console.log('Global flags:');
                console.log('  --json [fields] - Output in JSON format');
                console.log('');
                console.log('Environment variables:');
                console.log('  GITHUB_TOKEN - GitHub personal access token (required)');
                break;
        }
    } catch (error) {
        console.error(`Error: ${error.message}`);
        process.exit(1);
    }
}

/**
 * Read from stdin
 */
async function readStdin() {
    const chunks = [];
    for await (const chunk of process.stdin) {
        chunks.push(chunk);
    }
    return Buffer.concat(chunks).toString('utf8');
}

// Run CLI
main();