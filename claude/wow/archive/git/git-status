#!/usr/bin/env node

/**
 * Enhanced Git Status Script - Comprehensive repository overview
 * 
 * Provides detailed repository status including:
 * - Working directory changes
 * - Branch information
 * - Recent commits
 * - Remote sync status
 * - Repository metadata
 * 
 * Usage:
 *   git-status [--short] [--detailed] [--json]
 */

import { execSync } from 'child_process';
import path from 'path';
import { createRepoConfig } from './lib-repo-config.js';

// Initialize repository configuration
let repoConfig = null;

function getRepoConfig() {
    if (!repoConfig) {
        repoConfig = createRepoConfig();
    }
    return repoConfig;
}

/**
 * Execute git command with error handling
 */
function gitCommand(command, description, allowFailure = false) {
    try {
        const result = getRepoConfig().gitCommand(command, description);
        return result;
    } catch (error) {
        if (allowFailure) {
            return null;
        }
        console.warn(`Warning: ${description} failed: ${error.message}`);
        return null;
    }
}

/**
 * Get working directory status
 */
function getWorkingStatus() {
    const status = gitCommand('git status --porcelain', 'working status');
    if (!status) return { hasChanges: false, files: [] };
    
    const files = status.split('\n').filter(line => line.trim()).map(line => ({
        status: line.substring(0, 2),
        file: line.substring(3),
        staged: line[0] !== ' ' && line[0] !== '?',
        unstaged: line[1] !== ' '
    }));
    
    return {
        hasChanges: files.length > 0,
        files,
        staged: files.filter(f => f.staged).length,
        unstaged: files.filter(f => f.unstaged).length,
        untracked: files.filter(f => f.status.startsWith('??')).length
    };
}

/**
 * Get branch information
 */
function getBranchInfo() {
    const currentBranch = gitCommand('git branch --show-current', 'current branch');
    const allBranches = gitCommand('git branch -a', 'all branches', true);
    const remoteBranches = gitCommand('git branch -r', 'remote branches', true);
    
    // Check if current branch is tracking a remote
    const trackingInfo = gitCommand(`git status -b --porcelain`, 'tracking info', true);
    let tracking = null;
    if (trackingInfo) {
        const match = trackingInfo.match(/## ([^.]+)\.\.\.([^\s]+)/);
        if (match) {
            tracking = {
                local: match[1],
                remote: match[2]
            };
        }
    }
    
    return {
        current: currentBranch,
        tracking,
        localCount: allBranches ? allBranches.split('\n').filter(b => !b.includes('remotes/')).length : 0,
        remoteCount: remoteBranches ? remoteBranches.split('\n').length : 0
    };
}

/**
 * Get commit information
 */
function getCommitInfo() {
    const lastCommit = gitCommand('git log --oneline -1', 'last commit');
    const recentCommits = gitCommand('git log --oneline -5', 'recent commits');
    const commitCount = gitCommand('git rev-list --count HEAD', 'commit count', true);
    
    // Check ahead/behind status
    const aheadBehind = gitCommand('git status -b --porcelain', 'ahead/behind', true);
    let sync = { ahead: 0, behind: 0 };
    if (aheadBehind) {
        const match = aheadBehind.match(/ahead (\d+)|behind (\d+)/g);
        if (match) {
            match.forEach(m => {
                if (m.includes('ahead')) sync.ahead = parseInt(m.match(/\d+/)[0]);
                if (m.includes('behind')) sync.behind = parseInt(m.match(/\d+/)[0]);
            });
        }
    }
    
    return {
        last: lastCommit,
        recent: recentCommits ? recentCommits.split('\n') : [],
        total: commitCount ? parseInt(commitCount) : 0,
        sync
    };
}

/**
 * Get remote information
 */
function getRemoteInfo() {
    const remotes = gitCommand('git remote -v', 'remotes', true);
    const originUrl = gitCommand('git remote get-url origin', 'origin URL', true);
    
    let parsedRemotes = [];
    if (remotes) {
        const lines = remotes.split('\n').filter(line => line.trim());
        const remoteMap = new Map();
        
        lines.forEach(line => {
            const [name, url, type] = line.split(/\s+/);
            if (!remoteMap.has(name)) {
                remoteMap.set(name, { name, url, fetch: false, push: false });
            }
            remoteMap.get(name)[type.replace(/[()]/g, '')] = true;
        });
        
        parsedRemotes = Array.from(remoteMap.values());
    }
    
    return {
        count: parsedRemotes.length,
        remotes: parsedRemotes,
        origin: originUrl
    };
}

/**
 * Get repository metadata
 */
function getRepoMetadata() {
    const repoRoot = gitCommand('git rev-parse --show-toplevel', 'repo root', true);
    const gitDir = gitCommand('git rev-parse --git-dir', 'git directory', true);
    const isInside = gitCommand('git rev-parse --is-inside-work-tree', 'inside worktree', true) === 'true';
    
    let repoName = null;
    if (repoRoot) {
        repoName = path.basename(repoRoot);
    }
    
    return {
        name: repoName,
        root: repoRoot,
        gitDir,
        isInside
    };
}

/**
 * Format output for display
 */
function formatOutput(data, format = 'default') {
    if (format === 'json') {
        return JSON.stringify(data, null, 2);
    }
    
    if (format === 'short') {
        return formatShortOutput(data);
    }
    
    return formatDetailedOutput(data);
}

/**
 * Format short output
 */
function formatShortOutput(data) {
    const lines = [];
    
    // Repository info
    lines.push(`📁 ${data.repo.name || 'Unknown'} (${data.branch.current})`);
    
    // Working status
    if (data.working.hasChanges) {
        const parts = [];
        if (data.working.staged > 0) parts.push(`${data.working.staged} staged`);
        if (data.working.unstaged > 0) parts.push(`${data.working.unstaged} unstaged`);
        if (data.working.untracked > 0) parts.push(`${data.working.untracked} untracked`);
        lines.push(`📝 ${parts.join(', ')}`);
    } else {
        lines.push('✓ Working directory clean');
    }
    
    // Sync status
    if (data.commits.sync.ahead > 0 || data.commits.sync.behind > 0) {
        const parts = [];
        if (data.commits.sync.ahead > 0) parts.push(`${data.commits.sync.ahead} ahead`);
        if (data.commits.sync.behind > 0) parts.push(`${data.commits.sync.behind} behind`);
        lines.push(`🔄 ${parts.join(', ')}`);
    } else {
        lines.push('✓ In sync with remote');
    }
    
    return lines.join('\n');
}

/**
 * Format detailed output
 */
function formatDetailedOutput(data) {
    const lines = [];
    
    // Header
    lines.push('📊 Git Repository Status');
    lines.push('═'.repeat(50));
    
    // Repository info
    lines.push('\n📁 Repository Information:');
    lines.push(`   Name: ${data.repo.name || 'Unknown'}`);
    lines.push(`   Root: ${data.repo.root || 'Unknown'}`);
    lines.push(`   Branch: ${data.branch.current}`);
    
    // Remote info
    if (data.remote.count > 0) {
        lines.push(`   Remote: ${data.remote.origin || 'Unknown'}`);
    }
    
    // Working directory status
    lines.push('\n📝 Working Directory:');
    if (data.working.hasChanges) {
        lines.push(`   Status: ${data.working.files.length} changes detected`);
        if (data.working.staged > 0) lines.push(`   Staged: ${data.working.staged} files`);
        if (data.working.unstaged > 0) lines.push(`   Unstaged: ${data.working.unstaged} files`);
        if (data.working.untracked > 0) lines.push(`   Untracked: ${data.working.untracked} files`);
        
        // Show file details if not too many
        if (data.working.files.length <= 10) {
            lines.push('\n   Changed files:');
            data.working.files.forEach(file => {
                const statusIcon = {
                    'M ': '📝', ' M': '📝', 'MM': '📝',
                    'A ': '➕', ' A': '➕', 'AA': '➕',
                    'D ': '❌', ' D': '❌', 'DD': '❌',
                    '??': '❓'
                };
                const icon = statusIcon[file.status] || '📄';
                lines.push(`     ${icon} ${file.file}`);
            });
        }
    } else {
        lines.push('   Status: Clean ✓');
    }
    
    // Branch and sync info
    lines.push('\n🌿 Branch Information:');
    lines.push(`   Current: ${data.branch.current}`);
    if (data.branch.tracking) {
        lines.push(`   Tracking: ${data.branch.tracking.remote}`);
    }
    
    if (data.commits.sync.ahead > 0 || data.commits.sync.behind > 0) {
        const syncParts = [];
        if (data.commits.sync.ahead > 0) syncParts.push(`${data.commits.sync.ahead} commits ahead`);
        if (data.commits.sync.behind > 0) syncParts.push(`${data.commits.sync.behind} commits behind`);
        lines.push(`   Sync: ${syncParts.join(', ')}`);
    } else {
        lines.push('   Sync: Up to date ✓');
    }
    
    // Recent commits
    lines.push('\n📚 Recent Commits:');
    if (data.commits.recent.length > 0) {
        data.commits.recent.forEach(commit => {
            lines.push(`   ${commit}`);
        });
    } else {
        lines.push('   No commits found');
    }
    
    // Statistics
    lines.push(`\n📈 Statistics:`);
    lines.push(`   Total commits: ${data.commits.total}`);
    lines.push(`   Local branches: ${data.branch.localCount}`);
    lines.push(`   Remote branches: ${data.branch.remoteCount}`);
    
    return lines.join('\n');
}

/**
 * Main status function
 */
async function main() {
    try {
        const args = process.argv.slice(2);
        const format = args.includes('--json') ? 'json' : args.includes('--short') ? 'short' : 'detailed';
        
        // Gather all repository information
        const data = {
            repo: getRepoMetadata(),
            working: getWorkingStatus(),
            branch: getBranchInfo(),
            commits: getCommitInfo(),
            remote: getRemoteInfo(),
            timestamp: new Date().toISOString()
        };
        
        // Format and display output
        const output = formatOutput(data, format);
        console.log(output);
        
    } catch (error) {
        console.error(`❌ Status check failed: ${error.message}`);
        process.exit(1);
    }
}

// Run if called directly
if (process.argv[1] && process.argv[1].endsWith('git-status')) {
    main();
}