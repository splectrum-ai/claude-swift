#!/usr/bin/env node

/**
 * Git Sync Script - Safe repository synchronization
 * 
 * Ensures repository is properly synchronized with remote before starting work:
 * - Checks for uncommitted changes
 * - Switches to main branch
 * - Pulls latest changes
 * - Shows clean status
 * - Provides audit logging
 * 
 * Usage:
 *   git-sync [--force] [--dry-run]
 */

import { execSync } from 'child_process';
import { createRepoConfig } from './lib-repo-config.js';

/**
 * Audit logging helper
 */
function auditLog(step, details = '', action = 'step', description = '') {
    const timestamp = new Date().toISOString().replace('T', ' ').substring(0, 19);
    const entry = `${timestamp}|GIT_SYNC|${action}|${step}|${details}|${description}`;
    
    try {
        const auditPath = 'claude/project/audit/current/current.log';
        execSync(`echo "${entry}" >> "${auditPath}"`, { stdio: 'ignore' });
    } catch (error) {
        console.log(`[AUDIT] ${entry}`);
    }
}

// Initialize repository configuration
let repoConfig = null;

function getRepoConfig() {
    if (!repoConfig) {
        repoConfig = createRepoConfig();
    }
    return repoConfig;
}

/**
 * Execute git command with error handling
 */
function gitCommand(command, description, allowFailure = false) {
    try {
        const result = getRepoConfig().gitCommand(command, description);
        return result;
    } catch (error) {
        if (allowFailure) {
            return null;
        }
        throw error;
    }
}

/**
 * Check for uncommitted changes
 */
function checkUncommittedChanges() {
    auditLog('change_check', '', 'step', 'Checking for uncommitted changes');
    
    const status = gitCommand('git status --porcelain', 'status check');
    const hasChanges = status.length > 0;
    
    if (hasChanges) {
        const changedFiles = status.split('\n').filter(line => line.trim()).length;
        auditLog('change_check', changedFiles.toString(), 'step', `Found ${changedFiles} uncommitted changes`);
        return {
            hasChanges: true,
            changedFiles,
            statusOutput: status
        };
    }
    
    auditLog('change_check', '', 'step', 'Working directory is clean');
    return { hasChanges: false };
}

/**
 * Get current branch
 */
function getCurrentBranch() {
    auditLog('branch_check', '', 'step', 'Checking current branch');
    
    const branch = gitCommand('git branch --show-current', 'current branch check');
    auditLog('branch_check', branch, 'step', `Currently on branch: ${branch}`);
    return branch;
}

/**
 * Switch to main branch
 */
function switchToMain(currentBranch) {
    if (currentBranch === 'main') {
        auditLog('branch_switch', 'main', 'step', 'Already on main branch');
        return;
    }
    
    auditLog('branch_switch', `${currentBranch}->main`, 'step', 'Switching to main branch');
    gitCommand('git checkout main', 'switch to main');
    console.log(`‚úì Switched from ${currentBranch} to main`);
}

/**
 * Pull latest changes
 */
function pullLatestChanges() {
    auditLog('remote_sync', '', 'step', 'Pulling latest changes from remote');
    
    try {
        const result = gitCommand('git pull origin main', 'pull from remote');
        
        if (result.includes('Already up to date')) {
            auditLog('remote_sync', 'up-to-date', 'step', 'Repository already up to date');
            console.log('‚úì Repository already up to date');
        } else {
            // Parse pull result for changes
            const lines = result.split('\n');
            const summary = lines[lines.length - 1] || 'Changes pulled';
            auditLog('remote_sync', 'updated', 'step', `Pulled changes: ${summary}`);
            console.log(`‚úì Pulled latest changes: ${summary}`);
        }
    } catch (error) {
        auditLog('remote_sync', 'failed', 'step', `Pull failed: ${error.message}`);
        throw error;
    }
}

/**
 * Display final status
 */
function displayStatus() {
    auditLog('status_display', '', 'step', 'Displaying final repository status');
    
    const status = gitCommand('git status --porcelain', 'final status');
    const branch = gitCommand('git branch --show-current', 'current branch');
    const lastCommit = gitCommand('git log --oneline -1', 'last commit');
    
    console.log('\nüìä Repository Status:');
    console.log(`   Branch: ${branch}`);
    console.log(`   Last commit: ${lastCommit}`);
    
    if (status.length === 0) {
        console.log('   Working directory: Clean ‚úì');
        auditLog('status_display', 'clean', 'step', 'Working directory is clean');
    } else {
        const changedFiles = status.split('\n').filter(line => line.trim()).length;
        console.log(`   Working directory: ${changedFiles} uncommitted changes`);
        auditLog('status_display', changedFiles.toString(), 'step', `${changedFiles} uncommitted changes detected`);
    }
}

/**
 * Main sync workflow
 */
async function main() {
    try {
        const args = process.argv.slice(2);
        const force = args.includes('--force');
        const dryRun = args.includes('--dry-run');
        
        // Initialize workflow
        auditLog('sync_start', '', 'workflow_start', 'Starting repository synchronization workflow');
        console.log('üîÑ Starting repository synchronization...');
        
        // 1. Check for uncommitted changes
        const changeStatus = checkUncommittedChanges();
        
        if (changeStatus.hasChanges && !force) {
            console.log('\n‚ö†Ô∏è  Uncommitted changes detected:');
            console.log(changeStatus.statusOutput);
            console.log('\nOptions:');
            console.log('  - Commit changes first: `commit sesame`');
            console.log('  - Force sync anyway: `git-sync --force`');
            console.log('  - Review changes: `git status`');
            
            auditLog('sync_blocked', changeStatus.changedFiles.toString(), 'workflow_error', 'Sync blocked due to uncommitted changes');
            process.exit(1);
        }
        
        if (changeStatus.hasChanges && force) {
            console.log(`‚ö†Ô∏è  Forcing sync with ${changeStatus.changedFiles} uncommitted changes`);
        }
        
        if (dryRun) {
            console.log('üîç Dry run mode - showing what would be done:');
        }
        
        // 2. Check current branch and switch to main
        const currentBranch = getCurrentBranch();
        if (!dryRun) {
            switchToMain(currentBranch);
        } else {
            console.log(`   Would switch from ${currentBranch} to main`);
        }
        
        // 3. Pull latest changes
        if (!dryRun) {
            console.log('üì• Pulling latest changes...');
            pullLatestChanges();
        } else {
            console.log('   Would pull latest changes from origin/main');
        }
        
        // 4. Display final status
        if (!dryRun) {
            displayStatus();
        }
        
        // Complete workflow
        if (dryRun) {
            console.log('\nüîç Dry run complete - no changes made');
        } else {
            auditLog('sync_complete', '', 'workflow_complete', 'Repository synchronization completed successfully');
            console.log('\n‚úÖ Repository synchronization complete!');
        }
        
    } catch (error) {
        console.error(`‚ùå Sync failed: ${error.message}`);
        auditLog('sync_error', '', 'workflow_error', `Repository sync failed: ${error.message}`);
        process.exit(1);
    }
}

// Run if called directly
if (process.argv[1] && process.argv[1].endsWith('git-sync')) {
    main();
}