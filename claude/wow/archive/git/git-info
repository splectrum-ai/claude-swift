#!/usr/bin/env node

/**
 * Git Info Script - Quick repository information
 * 
 * Provides essential repository information:
 * - Repository name and path
 * - Remote URLs and origin
 * - Current branch and commit
 * - Basic statistics
 * 
 * Usage:
 *   git-info [--json] [--verbose]
 */

import { execSync } from 'child_process';
import path from 'path';
import { createRepoConfig } from './lib-repo-config.js';

// Initialize repository configuration
let repoConfig = null;

function getRepoConfig() {
    if (!repoConfig) {
        repoConfig = createRepoConfig();
    }
    return repoConfig;
}

/**
 * Execute git command with error handling
 */
function gitCommand(command, description, allowFailure = false) {
    try {
        const result = getRepoConfig().gitCommand(command, description);
        return result;
    } catch (error) {
        if (allowFailure) {
            return null;
        }
        console.warn(`Warning: ${description} failed`);
        return null;
    }
}

/**
 * Get repository basic information
 */
function getBasicInfo() {
    const repoRoot = gitCommand('git rev-parse --show-toplevel', 'repo root', true);
    const gitDir = gitCommand('git rev-parse --git-dir', 'git directory', true);
    const currentBranch = gitCommand('git branch --show-current', 'current branch', true);
    const lastCommit = gitCommand('git log --oneline -1', 'last commit', true);
    
    return {
        name: repoRoot ? path.basename(repoRoot) : 'Unknown',
        root: repoRoot,
        gitDir,
        branch: currentBranch,
        lastCommit
    };
}

/**
 * Get remote information
 */
function getRemoteInfo() {
    const remotes = gitCommand('git remote -v', 'remotes', true);
    const originUrl = gitCommand('git remote get-url origin', 'origin URL', true);
    
    let parsedRemotes = [];
    if (remotes) {
        const lines = remotes.split('\n').filter(line => line.trim());
        const remoteMap = new Map();
        
        lines.forEach(line => {
            const [name, url, type] = line.split(/\s+/);
            if (!remoteMap.has(name)) {
                remoteMap.set(name, { name, url });
            }
        });
        
        parsedRemotes = Array.from(remoteMap.values());
    }
    
    // Parse repository info from origin URL
    let repoInfo = null;
    if (originUrl) {
        const match = originUrl.match(/github\.com[/:]([^/]+)\/([^/]+)(?:\.git)?$/);
        if (match) {
            repoInfo = {
                owner: match[1],
                repo: match[2].replace(/\.git$/, ''),
                url: originUrl.replace(/\.git$/, ''),
                webUrl: `https://github.com/${match[1]}/${match[2].replace(/\.git$/, '')}`
            };
        }
    }
    
    return {
        count: parsedRemotes.length,
        remotes: parsedRemotes,
        origin: originUrl,
        github: repoInfo
    };
}

/**
 * Get commit and branch statistics
 */
function getStatistics() {
    const commitCount = gitCommand('git rev-list --count HEAD', 'commit count', true);
    const branches = gitCommand('git branch -a', 'all branches', true);
    const tags = gitCommand('git tag', 'tags', true);
    const contributors = gitCommand('git shortlog -sn', 'contributors', true);
    
    let branchCount = 0;
    let remoteBranchCount = 0;
    if (branches) {
        const branchLines = branches.split('\n').filter(line => line.trim());
        branchCount = branchLines.filter(line => !line.includes('remotes/')).length;
        remoteBranchCount = branchLines.filter(line => line.includes('remotes/')).length;
    }
    
    let tagCount = 0;
    if (tags) {
        tagCount = tags.split('\n').filter(line => line.trim()).length;
    }
    
    let contributorCount = 0;
    if (contributors) {
        contributorCount = contributors.split('\n').filter(line => line.trim()).length;
    }
    
    return {
        commits: commitCount ? parseInt(commitCount) : 0,
        branches: branchCount,
        remoteBranches: remoteBranchCount,
        tags: tagCount,
        contributors: contributorCount
    };
}

/**
 * Get working directory status
 */
function getWorkingStatus() {
    const status = gitCommand('git status --porcelain', 'working status', true);
    const stashList = gitCommand('git stash list', 'stash list', true);
    
    let fileCount = 0;
    if (status) {
        fileCount = status.split('\n').filter(line => line.trim()).length;
    }
    
    let stashCount = 0;
    if (stashList) {
        stashCount = stashList.split('\n').filter(line => line.trim()).length;
    }
    
    return {
        hasChanges: fileCount > 0,
        changedFiles: fileCount,
        stashes: stashCount
    };
}

/**
 * Format basic output
 */
function formatBasicOutput(data) {
    const lines = [];
    
    lines.push(`üìÅ ${data.basic.name}`);
    lines.push(`üåø ${data.basic.branch || 'Unknown branch'}`);
    
    if (data.remote.github) {
        lines.push(`üîó ${data.remote.github.owner}/${data.remote.github.repo}`);
    } else if (data.remote.origin) {
        lines.push(`üîó ${data.remote.origin}`);
    }
    
    if (data.basic.lastCommit) {
        lines.push(`üìù ${data.basic.lastCommit}`);
    }
    
    if (data.working.hasChanges) {
        lines.push(`‚ö†Ô∏è  ${data.working.changedFiles} uncommitted changes`);
    } else {
        lines.push(`‚úì Clean working directory`);
    }
    
    return lines.join('\n');
}

/**
 * Format verbose output
 */
function formatVerboseOutput(data) {
    const lines = [];
    
    // Header
    lines.push('üìä Git Repository Information');
    lines.push('‚ïê'.repeat(40));
    
    // Basic info
    lines.push('\nüìÅ Repository:');
    lines.push(`   Name: ${data.basic.name}`);
    lines.push(`   Path: ${data.basic.root || 'Unknown'}`);
    lines.push(`   Branch: ${data.basic.branch || 'Unknown'}`);
    
    // Remote info
    lines.push('\nüîó Remote Information:');
    if (data.remote.github) {
        lines.push(`   GitHub: ${data.remote.github.owner}/${data.remote.github.repo}`);
        lines.push(`   Web URL: ${data.remote.github.webUrl}`);
    }
    
    if (data.remote.remotes.length > 0) {
        lines.push(`   Remotes: ${data.remote.remotes.length}`);
        data.remote.remotes.forEach(remote => {
            lines.push(`     ${remote.name}: ${remote.url}`);
        });
    } else {
        lines.push('   Remotes: None configured');
    }
    
    // Current status
    lines.push('\nüìù Current Status:');
    if (data.basic.lastCommit) {
        lines.push(`   Last commit: ${data.basic.lastCommit}`);
    }
    
    if (data.working.hasChanges) {
        lines.push(`   Working dir: ${data.working.changedFiles} uncommitted changes`);
    } else {
        lines.push(`   Working dir: Clean ‚úì`);
    }
    
    if (data.working.stashes > 0) {
        lines.push(`   Stashes: ${data.working.stashes}`);
    }
    
    // Statistics
    lines.push('\nüìà Statistics:');
    lines.push(`   Commits: ${data.stats.commits}`);
    lines.push(`   Branches: ${data.stats.branches} local, ${data.stats.remoteBranches} remote`);
    lines.push(`   Tags: ${data.stats.tags}`);
    lines.push(`   Contributors: ${data.stats.contributors}`);
    
    return lines.join('\n');
}

/**
 * Main info function
 */
async function main() {
    try {
        const args = process.argv.slice(2);
        const json = args.includes('--json');
        const verbose = args.includes('--verbose');
        
        // Gather repository information
        const data = {
            basic: getBasicInfo(),
            remote: getRemoteInfo(),
            stats: getStatistics(),
            working: getWorkingStatus(),
            timestamp: new Date().toISOString()
        };
        
        // Format output
        if (json) {
            console.log(JSON.stringify(data, null, 2));
        } else if (verbose) {
            console.log(formatVerboseOutput(data));
        } else {
            console.log(formatBasicOutput(data));
        }
        
    } catch (error) {
        console.error(`‚ùå Info gathering failed: ${error.message}`);
        process.exit(1);
    }
}

// Run if called directly
if (process.argv[1] && process.argv[1].endsWith('git-info')) {
    main();
}